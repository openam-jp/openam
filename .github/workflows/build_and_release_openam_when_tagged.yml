name: Build and release OpenAM when tagged

on:
  push:
    tags:
      - '*'

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        java: [ '8' ]

    env:
      GIT_ORIGIN:           https://github.com/openam-jp
      ARTIFACTS_REGEX: |
                            ./openam/openam-distribution/openam-distribution-ssoconfiguratortools/target/SSOConfiguratorTools-\d+(\.\d+){2,}(-SNAPSHOT)?.zip
                            ./openam/openam-distribution/openam-distribution-ssoadmintools/target/SSOAdminTools-\d+(\.\d+){2,}(-SNAPSHOT)?.zip
                            ./openam/openam-server/target/OpenAM-\d+(\.\d+){2,}(-SNAPSHOT)?.war
      LICENSE_BODY:         "This project is subject to [the Common Development and Distribution License (CDDL)](LICENSE.md). \
                            Please check all the terms of the license before using these artifacts."
      REPO_NAMES: |
                            forgerock-parent
                            forgerock-bom
                            forgerock-build-tools
                            forgerock-i18n-framework
                            forgerock-guice
                            forgerock-guava
                            forgerock-ui
                            forgerock-commons
                            forgerock-persistit
                            forgerock-bloomfilter
                            opendj-sdk
                            opendj
                            openam

    steps:

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3.6.0
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'

    - name: Build in order
      id: build
      run: |
        for REPO in ${REPO_NAMES}; do
          git clone ${GIT_ORIGIN}/${REPO}

          #----------------------------------------
          # Get the commit hash of the latest tag of all branches, and get the name of the newest tag there, excluding nightly
          latest_tag=refs/tags/$(git -C ${REPO} describe --tags --exclude nightly `git -C ${REPO} rev-list --tags --max-count=1`)
          #----------------------------------------

          git -C ${REPO} checkout -b ${latest_tag}
        done

        for REPO in ${REPO_NAMES}; do
          #----------------------------------------
          # Ad hoc patch for maven-default-http-blocker
          #----------------------------------------
          if [ "${REPO}" == 'opendj' ]; then
            sed -ie "s|<url>http://download.oracle.com|<url>https://download.oracle.com|g" opendj/opendj-server-legacy/pom.xml
          fi
          if [ "${REPO}" == 'openam' ]; then
            sed -ie "s|<url>http://download.oracle.com|<url>https://download.oracle.com|g" openam/openam-core/pom.xml
          fi
          #----------------------------------------

          mvn clean install -f ${REPO}

          if [ $? -ne 0 ]; then
            exit 1;
          fi
        done

    - name: Get the version
      id: extract_version
      run: |
        echo "RELEASE_NAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> "$GITHUB_ENV"

    - name: Create the release
      id: create_release
      if: ${{ steps.build.outcome == 'success' }}
      uses: actions/github-script@v6.3.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}          
        result-encoding: string
        script: |
          /*
           * Create the release.
           *   - Using 'github-script' because 'create-release' action is no longer maintained.
           *   - Set the following attributes: Name, CDDL-license, pre-release indication.
           *   - Output release id. (Usage: "${{ steps.create_release.outputs.result }}")
           */
          const { RELEASE_NAME } = process.env;
          const { LICENSE_BODY } = process.env;
          const { owner, repo } = context.repo;

          const result = await github.rest.repos.createRelease({
            owner: owner,
            repo: repo,
            name: RELEASE_NAME,
            tag_name: RELEASE_NAME,
            body: LICENSE_BODY,
            generate_release_notes: false,
            draft: false,
            prerelease: false,
          }).catch((e) => {
            core.setFailed(`Cannot create release '${RELEASE_NAME}': ${e}`);
          })
          // Pass release ID to next step.
          console.log(`Created release '${RELEASE_NAME}': ${result.data.id}`);
          return `${result.data.id}`;

    - name: Upload artifacts
      id: upload_artifacts
      if: ${{ steps.create_release.outcome == 'success' }}
      uses: actions/github-script@v6.3.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}          
        script: |
          /*
           * Upload artifacts to the release.
           */
          const fs = require('fs');
          const path = require('path');

          const { owner, repo } = context.repo;
          const releaseId = `${{ steps.create_release.outputs.result }}`;
          const artifactRegexes = process.env.ARTIFACTS_REGEX.split("\n");

          if (releaseId === 'undefined') {
            core.setFailed('Release ID is undefined.');
            return 1;
          }

          await artifactRegexes.forEach(async artifactPathRegex => {
            // Skip if the path element is empty.
            if (artifactPathRegex.trim() === '') {
              return;
            }

            // Search target file by Regex.
            const targetDir = path.dirname(artifactPathRegex);
            const targetFileRegex = path.basename(artifactPathRegex);
            const findFileRegex = new RegExp(targetFileRegex, 'g');
            const artifactFileName = fs.readdirSync(targetDir).filter(fn => findFileRegex.test(fn))[0];

            console.log(`Found artifact: ${artifactFileName} in ${targetDir}`);

            await github.rest.repos.uploadReleaseAsset({
              owner: owner,
              repo: repo,
              release_id: releaseId,
              name: artifactFileName,
              data: await fs.readFileSync(`${targetDir}/${artifactFileName}`)
            }).then((res) => {
              console.log(`Uploaded: ${artifactFileName}`);
            }).catch((e) => {
              core.setFailed(`Cannot upload asset '${artifactFileName}': ${e}`);
            })
          });
